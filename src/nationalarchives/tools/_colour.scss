@use "sass:map";
@use "../features";
@use "../variables/colour";

@function brand-colour($colour) {
  @return map.get(colour.$colour-palette-brand, $colour);
}

@mixin colour-css-vars() {
  @each $name, $value in colour.$colour-palette-default {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-dark() {
  @each $name, $value in colour.$colour-palette-dark {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-high-contrast() {
  @each $name, $value in colour.$colour-palette-high-contrast {
    --#{$name}: #{$value};
  }
}

@mixin colour-css-vars-high-contrast-dark() {
  @each $name, $value in colour.$colour-palette-high-contrast-dark {
    --#{$name}: #{$value};
  }
}

@mixin colour-font($colour) {
  color: map.get(colour.$colour-palette-default, $colour);
  @if $colour == "accent" {
    color: var(--#{$colour}, var(--accent-default));
  } @else {
    color: var(--#{$colour});
  }
}

@mixin colour-background($colour) {
  background-color: map.get(colour.$colour-palette-default, $colour);
  @if $colour == "accent" {
    background-color: var(--#{$colour}, var(--accent-default));
  } @else {
    background-color: var(--#{$colour});
  }
}

@mixin colour-border($colour, $width: "", $style: solid, $direction: "") {
  @if $direction != "" {
    @if $width != "" {
      $property: border-#{$direction};
      border-#{$direction}: $width
        map.get(colour.$colour-palette-default, $colour)
        $style;
      border-#{$direction}: $width var(--#{$colour}) $style;
    } @else {
      border-#{$direction}-color: map.get(
        colour.$colour-palette-default,
        $colour
      );
      border-#{$direction}-color: var(--#{$colour});
    }
  } @else {
    @if $width != "" {
      border: $width map.get(colour.$colour-palette-default, $colour) $style;
      border: $width var(--#{$colour}) $style;
    } @else {
      border-color: map.get(colour.$colour-palette-default, $colour);
      border-color: var(--#{$colour});
    }
  }
}

@mixin colour-outline($colour) {
  outline-color: map.get(colour.$colour-palette-default, $colour);
  outline-color: var(--#{$colour});
}

@mixin colour-fill($colour) {
  fill: map.get(colour.$colour-palette-default, $colour);
  fill: var(--#{$colour});
}

@mixin fixed {
  @include colour-css-vars;

  // @include colour-font("font-base");
}

@mixin invert {
  --font-base: var(--contrast-font-base);
  --font-dark: var(--contrast-font-dark);
  --font-light: var(--contrast-font-light);
  --link: var(--contrast-link);
  --link-visited: var(--contrast-link-visited);
  --keyline: var(--contrast-keyline);
  --keyline-dark: var(--contrast-keyline-dark);

  // @include colour-font("contrast-font-base");
  @include colour-background("contrast-background");
}

@mixin uninvert {
  @include colour-css-vars;

  .tna-template--system-theme & {
    @include colour-css-vars;

    @media (prefers-color-scheme: dark) {
      @include colour-css-vars-dark;
    }

    @media (prefers-contrast: more) {
      @include colour-css-vars-high-contrast;
    }

    @media (prefers-contrast: more) and (prefers-color-scheme: dark) {
      @include colour-css-vars-high-contrast-dark;
    }
  }

  .tna-template--light-theme & {
    @include colour-css-vars;
  }

  .tna-template--dark-theme & {
    @include colour-css-vars-dark;
  }

  .tna-template--high-contrast-theme & {
    @include colour-css-vars-high-contrast;
  }

  .tna-template--high-contrast-theme.tna-template--dark-theme & {
    @include colour-css-vars-high-contrast-dark;
  }
}

@mixin on-high-contrast {
  .tna-template--high-contrast-theme & {
    @content;
  }

  @media (prefers-contrast: more) {
    .tna-template--system-theme & {
      @content;
    }
  }
}
